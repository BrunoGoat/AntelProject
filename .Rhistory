dk <- round(rlnorm(n, meanlog = log(md^2/ sqrt(md^2+sd^2)),
sdlog = sqrt(log(1 + sd^2/md^2))),0) #
maxt <- max(sapply(fi_it, length))
for(t in 1:maxt){
is <- which(runif(n) < sapply(fi_it,`[`, t) * c^(k >= dk)) #
if(length(is)!=0){
wts <- sapply(is, function(x) (wt_u[x]-1) + t) #
id <- c(id, is)
wt_c <- c(wt_c, wts)
fi_it[is] <- lapply(fi_it[is], function(x){x[t:(t+9+ns)] <- NA; return(x)}) #
k <- as.vector(table(factor(id, levels = 1:n))) #
}
}
# Data
hst <- as.data.frame(cbind(id = id, wt_c = wt_c))
hst <- hst[order(hst$id),]
hst <- as.data.frame(cbind(id = hst$id,
edad = (hst$wt_c + 9)/12,
nac = rep(table(hst$id), table(hst$id)),
paridad = sequence(table(hst$id))))
return(hst)
}
# Cargamos los datos de España
fx_es <- read.table(file.path("datos","asfr_hfd.txt"), skip = 2, header=T,
stringsAsFactors = F)
compute_lt <- function(nMx, x, sex, tabla = T) {
get_na0 <- function(nMx, sex){
if(sex=="M"){
if (nMx[1] < 0.023){
na0 <- 0.14929 - 1.99545 * nMx[1]
}else{
if(nMx[1] >= 0.023 & nMx[1] < .08307){
na0 <- .02832 + 3.26021 * nMx[1]
}else{
na0 <- 0.29915
}
}
}
if(sex=="F"){
if (nMx[1] <  0.01724){
na0 <- .14903 - 2.05527 * nMx[1]
}else{
if(nMx[1] >= 0.01724 & nMx[1] < 0.06891){
na0 <- 0.04667 + 3.88089 * nMx[1]
}else{
na0 <- .31411
}
}
}
return(na0)
}
# Definimos el número de intervalos
nmax <- length(nMX)
# Definimos los factores de separación nax
# creamos un vector vacio para guardar los nax
nax <- vector()
# definimos a0 con la ayuda de la función "get_na0"
na0 <- get_na0(nMx, T)
# asignamos los factores a cada intervalo
nax[1] <- na0
nax[2:nmax] <- 0.5
# convertimos las nMx en nqx
nqx <- (1*nMx)/(1+(1-nax)*nMx)
# nos aseguramos que la probabilidad en el último intervalo sea 1
nqx[nmax] <- 1
# Construimos las lx
lx <- c(1,cumprod((1-nqx)))
# Obtenemos las defunciones
ndx <- -diff(lx)
# creamos un vector con los sobrevivientes en x+n
lxn <- lx[-1]
# Obtenemos los años persona en el intervalo nLx
nLx <- lxn + (nax*ndx)
# Calculamos los años persona por encima de x
Tx <- rev(cumsum(rev(nLx)))
# Calculamos la esperanza de vida a edad x
ex <- Tx/lx[1:nmax]
# Creamos la tabla
if (tabla) {
lt <- data.frame(x, nax = round(nax, 4),
nMx = round(nMx,4),
nqx = round(nqx[1:nmax], 4), lx = round(lx[1:nmax],4),
ndx = round(ndx, 4), nLx = round(nLx, 4), Tx = round(Tx, 2),
ex = round(ex, 2))
return(lt)
}
else {
return(ex[1])
}
}
source("plot_fun.R")
# Cargamos los datos
Mx_all <- read.csv(file.path("datos","Mx_1x1_Denmark.txt"),
sep = "", skip = 1, header = T)
source("plot_fun.R")
source("plot_fun.R")
source("plot_fun.R")
source("plot_fun.R")
library(tidyverse)
# Cargamos los datos
Mx_all <- read.csv(file.path("datos","Mx_1x1_Denmark.txt"),
sep = "", skip = 1, header = T)
library(tidyverse)
# Cargamos los datos
Mx_all <- read.csv(file.path("datos","Mx_1x1_Denmark.txt"),
sep = "", skip = 1, header = T)
install.packages("readxl")
library(readxl)
#install.packages("readxl")
library(readxl)
# Defunciones
def_raw <- as.data.frame(read_excel("reporte.xlsx", skip = 14))
fx_ntl <- read.table("USA.txt", skip = 2,
header=T, stringsAsFactors = F)
View(fx_ntl)
plot_fx_hfd(dat = fx_ntl, cohorts = 1930:1975, type = "lines")
install.packages("tidyverse")
library(tidyverse)
library(ggplot2)
ggplot(a)
options (scipen = 999)
# Cargamos los datos
swf <- read.table("datos/sweden_data_1993_females.txt", header=F)
names(swf) <- c("age", "p93", "L", "f")
swm <- read.table("datos/sweden_data_1993_males.txt", header=F)
# Cargamos los datos
swf <- read.table("datos/sweden_data_1993_females.txt", header=F)
setwd
setwd()
options (scipen = 999)
getwd()# Cargamos los datos
setwd("C:/Users/IdeaV15/Documents/Estadística/Demografia/demografia_personal")
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject")
library(dplyr)
library(dplyr)
library(jsonlite)
library(dplyr)
library(jsonlite)
library(tidyverse)
library(dplyr)
library(jsonlite)
library(tidyverse)
library(purrr)
# load saved data
setwd("C:/Users/walte/OneDrive/Desktop/Antel/AntelRep/AntelProject/Rdata")
setwd("C:/Users/walte/OneDrive/Desktop/Antel/AntelRep/AntelProject/Rdata")
getwd()
# load saved data
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject")
setwd("C:/Users/walte/OneDrive/Desktop/Antel/AntelRep/AntelProject/Rdata")
load("data_cleaned.RData")
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject/Rdata")
load("data_cleaned.RData")
load("data_cleaned.RData")
library(dplyr)
library(jsonlite)
library(tidyverse)
library(purrr)
# load saved data
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject/Rdata")
setwd("C:/Users/walte/OneDrive/Desktop/Antel/AntelRep/AntelProject/Rdata")
library(dplyr)
library(jsonlite)
library(tidyverse)
library(purrr)
# load saved data
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject/Rdata")
#setwd("C:/Users/walte/OneDrive/Desktop/Antel/AntelRep/AntelProject/Rdata")
#Modifiquenlo y corranlo en la consola para no modificar el script
load("Rdata/data_cleaned.RData")
library(dplyr)
library(jsonlite)
library(tidyverse)
library(purrr)
# load saved data
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject/Rdata")
#setwd("C:/Users/walte/OneDrive/Desktop/Antel/AntelRep/AntelProject/Rdata")
#Modifiquenlo y corranlo en la consola para no modificar el script
load("data_cleaned.RData")
load("session_df.RData")
# load functions
setwd("C:/Users/walte/OneDrive/Desktop/Antel/AntelRep/AntelProject/functions")
library(dplyr)
library(jsonlite)
library(tidyverse)
library(purrr)
# load saved data
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject/Rdata")
setwd("C:/Users/walte/OneDrive/Desktop/Antel/AntelRep/AntelProject/Rdata")
library(dplyr)
library(jsonlite)
library(tidyverse)
library(purrr)
# load saved data
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject/Rdata")
#setwd("C:/Users/walte/OneDrive/Desktop/Antel/AntelRep/AntelProject/Rdata")
#Modifiquenlo y corranlo en la consola para no modificar el script
load("data_cleaned.RData")
load("session_df.RData")
# load functions
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject/functions")
#setwd("C:/Users/walte/OneDrive/Desktop/Antel/AntelRep/AntelProject/functions")
#Modifiquenlo y corranlo en la consola para no modificar el script
source("fixdatafunctions.R")
# Si no les funciona pueden abrir el archivo y cargar las dos funciones a mano
View(sessions_df)
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject/data")
#setwd("C:/Users/walte/OneDrive/Desktop/Antel/AntelRep/AntelProject/data")
#Modifiquenlo y corranlo en la consola para no modificar el script
clean_df <- clean_data_frame("primera_extracción_dataset.csv")
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject/Rdata")
#setwd("C:/Users/walte/OneDrive/Desktop/Antel/AntelRep/AntelProject/Rdata")
#Modifiquenlo y corranlo en la consola para no modificar el script
save(clean_df, file = "data_cleaned.RData")
library(dplyr)
library(jsonlite)
library(tidyverse)
library(purrr)
# load saved data
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject/Rdata")
#setwd("C:/Users/walte/OneDrive/Desktop/Antel/AntelRep/AntelProject/Rdata")
#Modifiquenlo y corranlo en la consola para no modificar el script
load("data_cleaned.RData")
load("session_df.RData")
# load functions
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject/functions")
#setwd("C:/Users/walte/OneDrive/Desktop/Antel/AntelRep/AntelProject/functions")
#Modifiquenlo y corranlo en la consola para no modificar el script
source("fixdatafunctions.R")
# Si no les funciona pueden abrir el archivo y cargar las dos funciones a mano
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject/data")
#setwd("C:/Users/walte/OneDrive/Desktop/Antel/AntelRep/AntelProject/data")
#Modifiquenlo y corranlo en la consola para no modificar el script
clean_df <- clean_data_frame("primera_extracción_dataset.csv")
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject/Rdata")
#setwd("C:/Users/walte/OneDrive/Desktop/Antel/AntelRep/AntelProject/Rdata")
#Modifiquenlo y corranlo en la consola para no modificar el script
save(clean_df, file = "data_cleaned.RData")
View(sessions_df)
View(sessions_df)
write.csv(sessions_df, "sessions_df.csv", row.names = FALSE)
read.csv("sessions_df.csv")
datos <- read.csv("sessions_df.csv")
View(datos)
library(dplyr)
library(jsonlite)
library(tidyverse)
library(purrr)
# load saved data
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject/Rdata")
load("data_cleaned.RData")
load("session_df.RData")
# load functions
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject/functions")
source("fixdatafunctions.R")
library(dplyr)
library(jsonlite)
library(tidyverse)
library(purrr)
# load saved data
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject/Rdata")
load("data_cleaned.RData")
load("session_df.RData")
# load functions
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject/functions")
source("fixdatafunctions.R")
# =====================
# 1. Cargar librerías
# =====================
library(readr)
library(dplyr)
library(caret)
library(randomForest)
# =====================
# 2. Cargar el archivo CSV
# =====================
df <- read.csv("sessions_df.csv", stringsAsFactors = TRUE)
# =====================
# 2. Cargar el archivo CSV
# =====================
df <- read.csv("sessions_df.csv", stringsAsFactors = TRUE)
# =====================
# 2. Cargar el archivo CSV
# =====================
df <- read.csv("Rdata/sessions_df.csv", stringsAsFactors = TRUE)
setwd("C:/Users/IdeaV15/Desktop/Estadistica/Antel_Proyect/AntelProject")
# =====================
# 2. Cargar el archivo CSV
# =====================
df <- read.csv("Rdata/sessions_df.csv", stringsAsFactors = TRUE)
# =====================
# 3. Verificamos la variable objetivo
# =====================
df$play <- as.factor(df$play)
# =====================
# 4. Eliminar columnas no predictivas
# =====================
df_model <- df %>%
select(-id, -date)
# =====================
# 5. Imputación de NA
# =====================
df_model <- df_model %>%
mutate(across(where(is.numeric), ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) %>%
mutate(across(where(is.factor), ~ {
moda <- names(sort(table(.), decreasing = TRUE))[1]
factor(ifelse(is.na(.), moda, as.character(.)), levels = levels(.))
}))
# =====================
# 6. División train/test
# =====================
set.seed(123)
train_idx <- createDataPartition(df_model$play, p = 0.7, list = FALSE)
train_data <- df_model[train_idx, ]
test_data  <- df_model[-train_idx, ]
# =====================
# 7. Entrenar modelo Random Forest
# =====================
modelo_rf <- randomForest(play ~ ., data = train_data, ntree = 500, importance = TRUE)
# =====================
# 8. Predicciones
# =====================
pred_rf <- predict(modelo_rf, newdata = test_data)
# =====================
# 9. Evaluar desempeño
# =====================
conf_mat <- confusionMatrix(pred_rf, test_data$play)
print(conf_mat)
# =====================
# 9. Evaluar desempeño
# =====================
conf_mat <- confusionMatrix(pred_rf, test_data$play)
print(conf_mat)
# =====================
# 10. Importancia de variables
# =====================
varImpPlot(modelo_rf)
# =====================
# 1. Cargar librerías
# =====================
library(readr)
library(dplyr)
library(caret)
library(randomForest)
# =====================
# 2. Cargar el archivo CSV
# =====================
df <- read.csv("sessions_df.csv", stringsAsFactors = TRUE)
# =====================
# 3. Verificar variable objetivo
# =====================
df$play <- as.factor(df$play)
# =====================
# 4. Eliminar columnas no predictivas
# =====================
df_model <- df %>%
select(-id, -date)
# =====================
# 5. Imputación de valores faltantes
# =====================
df_model <- df_model %>%
mutate(across(where(is.numeric), ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) %>%
mutate(across(where(is.factor), ~ {
moda <- names(sort(table(.), decreasing = TRUE))[1]
factor(ifelse(is.na(.), moda, as.character(.)), levels = levels(.))
}))
# =====================
# 6. División en conjunto de entrenamiento y test
# =====================
set.seed(123)
train_idx <- createDataPartition(df_model$play, p = 0.7, list = FALSE)
train_data <- df_model[train_idx, ]
test_data  <- df_model[-train_idx, ]
# =====================
# 7. Entrenamiento del modelo Random Forest
# =====================
modelo_rf <- randomForest(play ~ ., data = train_data, ntree = 500, importance = TRUE)
# =====================
# 8. Predicción sobre el conjunto de test
# =====================
pred_rf <- predict(modelo_rf, newdata = test_data)
# =====================
# 9. Evaluación del modelo
# =====================
conf_mat <- confusionMatrix(pred_rf, test_data$play)
print(conf_mat)
# =====================
# 10. Comparación: predicho vs real
# =====================
comparacion <- data.frame(
predicho = pred_rf,
real = test_data$play
)
# Ver primeros 20
head(comparacion, 20)
# Ver primeros 20
head(comparacion, 20)
# Agregar columna de acierto
comparacion <- comparacion %>%
mutate(acierto = predicho == real)
# Ver conteo de aciertos y errores
table(comparacion$acierto)
# Ver porcentaje de aciertos (accuracy manual)
mean(comparacion$acierto)
# =====================
# 11. Importancia de variables
# =====================
varImpPlot(modelo_rf)
# =====================
# 11. Importancia de variables
# =====================
varImpPlot(modelo_rf)
prop.table(table(df$play))
df %>%
group_by(play) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
modelo_rf <- randomForest(
play ~ ., data = train_data,
ntree = 500,
importance = TRUE,
classwt = c("FALSE" = 1, "TRUE" = 6.6)  # 6.6 ≈ 0.87 / 0.13
)
# =====================
# 8. Predicción sobre el conjunto de test
# =====================
pred_rf <- predict(modelo_rf, newdata = test_data)
# =====================
# 9. Evaluación del modelo
# =====================
conf_mat <- confusionMatrix(pred_rf, test_data$play)
print(conf_mat)
# =====================
# 10. Comparación: predicho vs real
# =====================
comparacion <- data.frame(
predicho = pred_rf,
real = test_data$play
)
# Ver primeros 20
head(comparacion, 20)
# Agregar columna de acierto
comparacion <- comparacion %>%
mutate(acierto = predicho == real)
# Ver conteo de aciertos y errores
table(comparacion$acierto)
modelo_rf <- randomForest(
play ~ ., data = train_data,
ntree = 500,
importance = TRUE,
classwt = c("FALSE" = 1, "TRUE" = 20)  # 6.6 ≈ 0.87 / 0.13
)
pred_rf <- predict(modelo_rf, newdata = test_data)
# =====================
# 9. Evaluación del modelo
# =====================
conf_mat <- confusionMatrix(pred_rf, test_data$play)
print(conf_mat)
# =====================
# 10. Comparación: predicho vs real
# =====================
comparacion <- data.frame(
predicho = pred_rf,
real = test_data$play
)
# Ver primeros 20
head(comparacion, 20)
# Agregar columna de acierto
comparacion <- comparacion %>%
mutate(acierto = predicho == real)
# Ver conteo de aciertos y errores
table(comparacion$acierto)
# Ver porcentaje de aciertos (accuracy manual)
mean(comparacion$acierto)
# =====================
# 11. Importancia de variables
# =====================
varImpPlot(modelo_rf)
modelo_rf <- randomForest(
play ~ ., data = train_data,
ntree = 500,
importance = TRUE,
classwt = c("FALSE" = 1, "TRUE" = 50)  # 6.6 ≈ 0.87 / 0.13
)
pred_rf <- predict(modelo_rf, newdata = test_data)
# =====================
# 9. Evaluación del modelo
# =====================
conf_mat <- confusionMatrix(pred_rf, test_data$play)
print(conf_mat)
# =====================
# 10. Comparación: predicho vs real
# =====================
comparacion <- data.frame(
predicho = pred_rf,
real = test_data$play
)
# Ver primeros 20
head(comparacion, 20)
# Agregar columna de acierto
comparacion <- comparacion %>%
mutate(acierto = predicho == real)
# Ver conteo de aciertos y errores
table(comparacion$acierto)
# Ver porcentaje de aciertos (accuracy manual)
mean(comparacion$acierto)
# =====================
# 11. Importancia de variables
# =====================
varImpPlot(modelo_rf)
colnames(train_data)
library(caret)
confusionMatrix(pred_rf, test_data$play, positive = "TRUE")
